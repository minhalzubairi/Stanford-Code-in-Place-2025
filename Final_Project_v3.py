# -*- coding: utf-8 -*-
"""temp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UxtuKaESjmoD3zRWq-d4RES3FRd58O49
"""

import pytz
import datetime

## - - - - - - - -  - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - - -
def validated_id():
  while True:
    id = input("Enter the unique ID of the product: ").upper()
    if id.isalnum() and len(id)==5: #limited the product ID to be upto 5 characters with alphanumeric inputs allowed only
      return id
    else:
      print("Invalid input. Use 5 characters Alphanumeric values only.\n")

def validated_name():
  while True:
    name = input("Enter product name: ").lower()
    if not name.isdigit():#replace(' ','').isalnum():
      return name
    else:
      print("Invalid input. Do not use numbers only as a name.\n")

def validated_category():
  while True:
    category = input("Enter category name: ").lower()
    if not category.isdigit():#replace(' ','').isalnum():
      return category
    else:
      print("Invalid input. Do not use numbers only as a category.\n")

def validated_price():
  while True:
    try:
      price=float(input("Enter per unit price: "))
      if price <= 0:
        print("Invalid price. Use a positive number.\n")
      else:
        return price
    except ValueError:
      print("Invalid input. Use a positive numeric value.\n")

def validated_quantity():
  while True:
    try:
      quantity=int(input("Enter quantity: "))
      if quantity <= 0:
        print("Invalid quantity. Use a positive number.\n")
      else:
        return quantity
    except ValueError:
      print("Invalid input. Use a positive numeric value.\n")

def add_products(id):
  name = validated_name()
  category = validated_category()
  price = validated_price()
  quantity = validated_quantity()
  products[id] = {'name': name, 'category': category, 'price': price, 'quantity': quantity}
  print(f"Product '{name.title()}' under unique ID '{id}' added successfully.\n")

def update_products():
  id = validated_id()
  if id in products:
    print('What would you like to update?')
    print('1. Name\n2. Category\n3. Price\n4. Stock Quantity')
    update_choice = input("Enter your choice (1-4): ")
    if update_choice == '1':
      new_name = validated_name()
      products[id]['name'] = new_name
      print(f"Name of product '{id}' updated successfully.\n")
    elif update_choice == '2':
      new_category = validated_category()
      products[id]['category'] = new_category
      print(f"Category of product '{id}' updated successfully.\n")
    elif update_choice == '3':
      new_price = validated_price()
      products[id]['price'] = new_price
      print(f"Price of product '{id}' updated successfully.\n")
    elif update_choice == '4':
      new_quantity = validated_quantity()
      products[id]['quantity'] = new_quantity
      print(f"Stock quantity of product '{id}' updated successfully.\n")
    elif update_choice not in ('1','2','3','4'):
      print("Invalid choice.\n")
  else:
      print("Product not found.\n")

def update_more():
  while True:
    update_more = input("Do you want to update more products? (y/n): ").lower()
    if update_more == 'y':
      update_products()
    elif update_more == 'n':
      print('Going back to Product and Inventory Management Menu.')
      break
    elif update_more not in ('y','n'):
      print("Invalid input. Please enter 'y' or 'n'.\n")

## - - - - - - - - - - - - - - - - - MAIN BODY - - - - - - - - - - - - - - - - -

print('Welcome to Smart Inventory and Sales Management System. \nFollowing Modules are available to choose from:')
print(" 1. Product and Inventory Management\n 2. Sales Processing \n 3. Reports and Analysis\n 4. Exit Program")
products = {}
sales = {}
sales_log=[]

while True:
  main_menu = input("Enter your choice from the Main Menu (1-4): ")

### - - - - - - - - - - - PRODUCT & INVENTORY MANAGEMENT - - - - - - - - - - - -

  if main_menu == '1':
    print('Welcome to the Product and Inventory Management System\n')
    print(" 1. Add Products\n 2. View Products \n 3. Update Product Information\n 4. Delete Product\n 5. Back to main menu")

    while True:
        choice = input("Enter your choice (1-5): ")

        #Add Products
        if choice == '1':
            id = validated_id()
            if id not in products:
              add_products(id)

              while True:
                add_more = input("Do you want to add more products? (y/n): ").lower()
                if add_more == 'y':
                  id = validated_id()
                  if id not in products:
                    add_products(id)
                  elif id in products:
                    print(f"Product '{id}' already exists.\n")
                elif add_more == 'n':
                  print('Going back to Product and Inventory Management Menu.')
                  break
                elif add_more != 'y' or 'n':
                  print("Invalid input. Please enter 'y' or 'n'.\n")

            elif id in products:
              print(f"Product '{id}' already exists. \nGoing back to Product and Inventory Management Menu.")

        #View Products
        elif choice == '2':
          if len(products)!=0:
            print("\nThe available products are as follows: ")
            print("{:<15} {:<20} {:<20} {:<15} {:<15}".format('ID','Name','Category','Unit Price','Stock Quantity'))
            print("-" * 95)
            for id, info in products.items():
              print("{:<15} {:<20} {:<20} {:<15} {:<15}".format(id, info['name'].title(), info['category'].title(), f"{info['price']:,.2f}", info['quantity']))
          else:
            print("No products available. \nGoing back to the main menu now . . .")

        #Update Product Info
        elif choice == '3':
          if id in products:
            print('Update Product Information, which product would you like to update?')
            id = validated_id()
            print('What would you like to update?')
            print('1. Name\n2. Category\n3. Price\n4. Stock Quantity')
            update_choice = input("Enter your choice (1-4): ")

            if update_choice == '1':
              new_name = validated_name()
              products[id]['name'] = new_name
              print(f"Name of product '{id}' updated successfully.\n")
              update_more()
            elif update_choice == '2':
              new_category = validated_category()
              products[id]['category'] = new_category
              print(f"Category of product '{id}' updated successfully.\n")
              update_more()
            elif update_choice == '3':
              new_price = validated_price()
              products[id]['price'] = new_price
              print(f"Price of product '{id}' updated successfully.\n")
              update_more()
            elif update_choice == '4':
              new_quantity = validated_quantity()
              products[id]['quantity'] = new_quantity
              print(f"Stock quantity of product '{id}' updated successfully.\n")
              update_more()
            elif update_choice not in ('1','2','3','4'):
              print("Invalid choice.\n")

          elif id not in products:
            if len(products)==0:
              print('No products available. \nGoing back to the main menu now . . .')
            else:
              print("Product not found.\nGoing back to Product and Inventory Management Menu.")

        #Delete Product
        elif choice == '4':
          if id in products:
            id = validated_id()
            del products[id]
            print(f"Product '{id}' deleted successfully.\nGoing back to Product and Inventory Management Menu.")

          elif id not in products:
            if len(products)==0:
              print('No products available. \nGoing back to the main menu now . . .')
            else:
              print("Product not found.\nGoing back to Product and Inventory Management Menu.")

        #Back to Main Menu
        elif choice == '5':
          print("Exiting the Product and Inventory Management System. . .")
          break

        elif choice not in ('1','2','3','4','5'):
          print("Invalid choice.\n")

### - - - - - - - - - - - - SALES PROCESSING MODULE - - - - - - - - - - - - - -

  elif main_menu == '2':
    print('Welcome to the Sales Processing Module\n')
    while True:
      print("What needs to be sold?")
      id = validated_id()
      if id not in products:
        if len(products)==0: #validate for empty products dictionary presence
          print("No products available. \nAdd a product to initiate a sale.")
          break
        else:
          print("Product not found.\n")
          continue

      elif products[id]['quantity']==0:
        print(f"No more stock for product {products[id]['name']} left.\n")
        break #reason is without that it will keep asking for more even if all products go out of stock

      else:
        while True:
          quantity_sold = validated_quantity()
          if quantity_sold > products[id]['quantity']:
            print(f"Insufficient Quantity to complete the sale. Available stock quantity is {products[id]['quantity']}.")
            continue
          elif quantity_sold <= products[id]['quantity']:
            products[id]['quantity'] -= quantity_sold
            total_cost = products[id]['price'] * quantity_sold
            timezone=pytz.timezone('Asia/Karachi') #specified for khi timezone, it takes the default of the machine otherwise
            current_time=datetime.datetime.now(timezone).strftime("%d-%m-%Y : %H:%M:%S")
            sales_log.append({'timestamp': current_time, 'product_id': id, 'product_name': products[id]['name'], 'unit_price':products[id]['price'], 'quantity': quantity_sold, 'total_cost': total_cost})
            break

        while True:
          next_step=input("Would you like to buy anything else? Or should I generate the receipt?\n Enter 'm' to buy more and 'r' to generate a receipt: ").lower()
          if next_step not in ('m','r'):
            print("Invalid input. Please enter 'm' or 'r'.")
          elif next_step == 'm':
            break
          elif next_step == 'r':
            print("\n--------------- Receipt ---------------- \n")
            for sale in sales_log:
              prdid = sale['product_id']
              if prdid not in sales:
                sales[prdid] = {'product_name': sale['product_name'],'unit_price': sale['unit_price'],'quantity': sale['quantity'],'total_cost': sale['total_cost']}
              else:
                sales[prdid]['quantity'] += sale['quantity']
                sales[prdid]['total_cost'] += sale['total_cost']

            for pid, sale in sales.items():
              print(f"Product Name: {sale['product_name'].title()} \nUnit Price: {sale['unit_price']:,.2f} \nQuantity Sold: {sale['quantity']} \nTotal Cost: {sale['total_cost']:,.2f} \n{'=' * 40}")
            print(f"Grand Total: {sum(sale['total_cost'] for sale in sales_log):,.2f}\n{'=' * 40}\n\nGoing back to the main menu now . . .")
            break

        if next_step == 'r':
          break

### - - - - - - - - - - - - - - SALES SUMMARY REPORT - - - - - - - - - - - - - -

  elif main_menu == '3':

    total_revenue=sum(sale['total_cost'] for sale in sales_log)
    sales_transactions=0
    rev_tracker={}

    for items in sales_log:
      sales_transactions+=1
      prd_id=items['product_id']
      prd_rev=items['total_cost']
      prd_name=products[prd_id]['name']

      if prd_id in rev_tracker:
        rev_tracker[prd_id]+=prd_rev
      else:
        rev_tracker[prd_id]=prd_rev

    if rev_tracker: #validate for empty rev_tracker dictionary:case where a user directly generates a report without adding products or making sales
      top_prd_id=max(rev_tracker, key=rev_tracker.get)
      top_name = products[top_prd_id]['name'].title()
      top_revenue = rev_tracker[top_prd_id]

      print(f"\n{'='*50}\n{'SALES SUMMARY REPORT'.center(50)}\n{'='*50}")
      print(f"Total no. of sales transactions: {sales_transactions} \nTotal revenue: {total_revenue:,.2f}/- \nTop-Selling Product: {top_name} (ID: {top_prd_id}) \n\tRevenue Generated: {top_revenue:,.2f}/- \n {'-'*50}")
      print("LOW STOCK PRODUCTS".center(50))
      print("-"*50)

      print(f'To Display Low Stock Products: ')
      threshold=validated_quantity()
      low_stock=[]

      for id, info in products.items():
        if info['quantity'] <= threshold:
          low_stock.append({id, info})
          print(low_stock)

      if low_stock:
        print("\nLow Stock Products:")
        for id, info in low_stock:
          print(f"ID: {id:<10} Name: {info['name'].title():<15} Category: {info['category'].title():<15} Quantity: {info['quantity']}")
        print('Going back to the main menu . . .\n')
      else:
        print("No products are below the defined threshold. \nGoing back to the main menu . . .")

    else:
      print("No sales transactions to display. \nGoing back to the main menu . . .")

  elif main_menu == '4':
    print("Exiting the Program. \n Goodbye . . .")
    break

  else: #if main_menu not in ('1','2','3','4'):
    print("Invalid main menu choice. Please enter a value from 1 to 4.\n")